{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","squareAt","currentIndex","highlight","console","log","onClick","style","color","value","Board","i","this","lineWin","squares","key","includes","row","j","renderSquare","Component","calculateWinner","lines","length","a","b","c","player","draw","Game","state","history","Array","fill","stepNumber","xIsNext","isASC","slice","setState","concat","lastIndex","step","status","current","statusGame","moves","map","move","col","Math","floor","desc","jumpTo","reverse","handleClick","handleSort","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.903cf10d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Square.css\";\r\n\r\nexport default function Square(props) {\r\n  let className = 'square' + (props.squareAt === props.currentIndex ? ' current' : '');\r\n  className = className + (props.highlight ? ' highlight' : '');\r\n  console.log('class',className);\r\n  return (\r\n    <button className={className} onClick={props.onClick} style={{color: (props.value === 'O'? 'red':'blue')}}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport Square from \"../Square/Square\";\r\nimport \"./Board.css\";\r\n\r\n\r\nexport default class Board extends Component {\r\n  renderSquare(i) {\r\n    const {currentIndex, lineWin} = this.props;\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        squareAt ={i}\r\n        key={i}\r\n        currentIndex={currentIndex}\r\n        highlight={lineWin && lineWin.includes(i)}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    const sizeOfBoard = 3;\r\n    let squares = [];\r\n    for(let i=0; i<sizeOfBoard; ++i) {\r\n      let row = [];\r\n      for(let j=0; j<sizeOfBoard; ++j) {\r\n        row = [...row,this.renderSquare(i * sizeOfBoard + j)];\r\n      }\r\n      squares=[...squares,(<div key={i} className=\"board-row\">{row}</div>)];\r\n    }\r\n\r\n    return (\r\n      <div>{squares}</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport \"./Game.css\";\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        player : squares[a],\r\n        lineWin : lines[i]\r\n      }\r\n    }\r\n  }\r\n  if (!squares.includes(null)){\r\n    return {\r\n      draw : true\r\n    }\r\n  }\r\n  return {\r\n    player : null,\r\n    lineWin : null\r\n  };\r\n}\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isASC: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).player || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          lastIndex: i,\r\n        },\r\n      ]),\r\n\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n  handleSort() {\r\n    this.setState({\r\n      isASC: !this.state.isASC\r\n    });\r\n  }\r\n  render() {\r\n    const { history, stepNumber, isASC } = this.state;\r\n    const current = history[stepNumber];\r\n    const statusGame = calculateWinner(current.squares);\r\n    const lineWin = calculateWinner(current.squares).lineWin;\r\n    \r\n    const moves = history.map((step, move) => {\r\n      const lastIndex = step.lastIndex;\r\n      const col = 1 + (lastIndex % 3);\r\n      const row = 1 + Math.floor(lastIndex / 3);\r\n      const desc = move\r\n        ? `Go to move #${move} at (${col}, ${row})`\r\n        : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === stepNumber ? \"move-list-item-selected\" : \"\"}\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    if (!isASC) {\r\n      moves.reverse();\r\n    }\r\n\r\n    let status;\r\n    if (statusGame.draw) {\r\n      status = \"Draw\";\r\n    } else if (statusGame.player) {\r\n      status = \"Winner : \" + statusGame.player;\r\n    }\r\n    else{\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className = \"div-game\">\r\n        <div className=\"game\">\r\n        <div className=\"game-board\">\r\n        <div className=\"status\">{status}</div>\r\n          <Board\r\n            squares={current.squares}\r\n            currentIndex={!(status==='Draw') ? current.lastIndex : null}\r\n            lineWin = {lineWin}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <button className=\"toggle\" onClick={() => this.handleSort()}>\r\n            {isASC ? \"Descending\" : \"Ascending\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}