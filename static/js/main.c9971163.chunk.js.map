{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","squareAt","currentIndex","highlight","console","log","onClick","style","color","value","Board","renderSquare","i","lineWin","squares","key","includes","row","j","calculateWinner","lines","length","a","b","c","player","draw","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","isASC","setIsASC","current","statusGame","moves","map","step","move","lastIndex","col","Math","floor","desc","jumpTo","reverse","historyCurr","slice","concat","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9971163.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Square.css\";\r\n\r\nexport default function Square(props) {\r\n  let className = 'square' + (props.squareAt === props.currentIndex ? ' current' : '');\r\n  className = className + (props.highlight ? ' highlight' : '');\r\n  console.log('class',className);\r\n  return (\r\n    <button className={className} onClick={props.onClick} style={{color: (props.value === 'O'? 'red':'blue')}}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport Square from \"../Square/Square\";\r\nimport \"./Board.css\";\r\nfunction Board(props) {\r\n  const renderSquare = (i) => {\r\n    const { currentIndex, lineWin } = props;\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        squareAt={i}\r\n        key={i}\r\n        currentIndex={currentIndex}\r\n        highlight={lineWin && lineWin.includes(i)}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n  const sizeOfBoard = 3;\r\n  let squares = [];\r\n  for (let i = 0; i < sizeOfBoard; ++i) {\r\n    let row = [];\r\n    for (let j = 0; j < sizeOfBoard; ++j) {\r\n      row = [...row, renderSquare(i * sizeOfBoard + j)];\r\n    }\r\n    squares = [\r\n      ...squares,\r\n      <div key={i} className=\"board-row\">\r\n        {row}\r\n      </div>,\r\n    ];\r\n  }\r\n\r\n  return <div>{squares}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport \"./Game.css\";\r\nfunction Game() {\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(9).fill(null),\r\n    },\r\n  ]);\r\n\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const [isASC, setIsASC] = useState(true);\r\n\r\n  const handleClick = (i) => {\r\n    const historyCurr = history.slice(0, stepNumber + 1);\r\n    const current = historyCurr[historyCurr.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).player || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      historyCurr.concat([\r\n        {\r\n          squares: squares,\r\n          lastIndex: i,\r\n        },\r\n      ])\r\n    );\r\n    setStepNumber(historyCurr.length);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXisNext(step % 2 === 0);\r\n  };\r\n  const handleSort = () => {\r\n    setIsASC(!isASC);\r\n  };\r\n\r\n  const current = history[stepNumber];\r\n  const statusGame = calculateWinner(current.squares);\r\n  const lineWin = statusGame.lineWin;\r\n\r\n  const moves = history.map((step, move) => {\r\n    const lastIndex = step.lastIndex;\r\n    const col = 1 + (lastIndex % 3);\r\n    const row = 1 + Math.floor(lastIndex / 3);\r\n    const desc = move\r\n      ? `Go to move #${move} at (${col}, ${row})`\r\n      : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button\r\n          className={move === stepNumber ? \"move-list-item-selected\" : \"\"}\r\n          onClick={() => jumpTo(move)}\r\n        >\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (!isASC) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (statusGame.draw) {\r\n    status = \"Draw\";\r\n  } else if (statusGame.player) {\r\n    status = \"Winner : \" + statusGame.player;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"div-game\">\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <div className=\"status\">{status}</div>\r\n          <Board\r\n            squares={current.squares}\r\n            currentIndex={!(status === \"Draw\") ? current.lastIndex : null}\r\n            lineWin={lineWin}\r\n            onClick={(i) => handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <button className=\"toggle\" onClick={() => handleSort()}>\r\n            {isASC ? \"Descending\" : \"Ascending\"}\r\n          </button>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        player: squares[a],\r\n        lineWin: lines[i],\r\n      };\r\n    }\r\n  }\r\n  if (!squares.includes(null)) {\r\n    return {\r\n      draw: true,\r\n    };\r\n  }\r\n  return {\r\n    player: null,\r\n    lineWin: null,\r\n  };\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\n\nimport './App.css';\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}